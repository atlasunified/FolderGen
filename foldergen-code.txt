FolderGen
' This VBA code automates the process of creating folders, downloading PDF files from URLs, 
' converting PDF files to Word documents and text files. The code reads URLs and folder names from 
' an Excel worksheet and saves the files in a parent folder with subfolders for each unique folder 
' name. This code is excellent for data collection purposes for machine learning tasks.
' If your're a developer, manipulating this information is easy. If you're a
' novice, chances are you aren't reading this, but if you are, just modify the
' information within the rows themselves and keep a mental note of what the data
' represents.

' Atlas Unified

Sub DownloadAndConvert()

    Dim FileSystem As Object
    Dim FolderPath As String
    Dim ParentFolderPath As String
    Dim ws As Worksheet
    Dim i As Long
    Dim URL As String
    Dim FolderName As String
    Dim xmlhttp As Object
    Dim Folder As Object
    Dim WordApp As Object
    Dim PDFDoc As Object
    
    Application.StatusBar = "Processing..."
    
    Set FileSystem = CreateObject("Scripting.FileSystemObject")
    ParentFolderPath = "C:\FolderGen2"

    If Not FileSystem.FolderExists(ParentFolderPath) Then
        FileSystem.CreateFolder ParentFolderPath
    End If

    Set ws = ThisWorkbook.Worksheets("Sheet1")

    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "G").End(xlUp).Row

    For i = 2 To lastRow
        FolderName = ws.Cells(i, 10).Value

        If Not FileSystem.FolderExists(ParentFolderPath & "\" & FolderName) Then
            FileSystem.CreateFolder ParentFolderPath & "\" & FolderName
        End If

        URL = ws.Cells(i, "G").Value

        If URL <> "" Then
            FolderPath = ParentFolderPath & "\" & FolderName

            Set xmlhttp = CreateObject("MSXML2.XMLHTTP")
            xmlhttp.Open "GET", URL, False
            xmlhttp.send

            If xmlhttp.Status = 200 Then
                Filename = FolderPath & "\" & "PDF_" & i & ".pdf"

                ' Delete file if it already exists
                If FileSystem.FileExists(Filename) Then
                    FileSystem.DeleteFile Filename
                End If

                Set oStream = CreateObject("ADODB.Stream")
                oStream.Open
                oStream.Type = 1
                oStream.Write xmlhttp.responseBody
                oStream.SaveToFile Filename, 2
                oStream.Close

                Application.StatusBar = "Processing: " & FolderName & " | File: " & i - startRow + 1 & " of " & endRow - startRow + 1 & " | Current File: PDF_" & i & ".docx" & " | Time elapsed: " & elapsedTime

                ' Convert PDF to Word
                Set WordApp = CreateObject("Word.Application")
                WordApp.Visible = False
                Set PDFDoc = WordApp.Documents.Open(Filename)
                
                Application.StatusBar = "Processing: " & FolderName & " | File: " & i - startRow + 1 & " of " & endRow - startRow + 1 & " | Current File: PDF_" & i & ".docx" & " | Time elapsed: " & elapsedTime
                
                PDFDoc.SaveAs2 Replace(Filename, ".pdf", ".docx"), FileFormat:=16
                PDFDoc.SaveAs2 Replace(Filename, ".pdf", ".txt"), FileFormat:=2
                PDFDoc.Close
            End If
        End If

    Next i

    WordApp.Quit

    ' Display a message when execution is done
    MsgBox "Files have been downloaded and converted successfully.", vbInformation, "Execution Complete"

End Sub

Private Sub CommandButton1_Click()

    DownloadAndConvert

End Sub